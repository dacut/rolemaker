AWSTemplateFormatVersion: "2010-09-09"
Description: "Rolemaker: Allow end users to create restricted AWS roles"
Parameters:
  DynamoDBTablePrefix:
    Type: String
    Description: The prefix to attach to all DynamoDB tables.
    Default: Rolemaker.
Resources:
  ParameterTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Name
          AttributeType: S
      KeySchema:
        - AttributeName: Name
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 1
      TableName: !Sub "${DynamoDBTablePrefix}Parameters"
  Accounts:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: AWSAccountId
          AttributeType: S
      KeySchema:
        - AttributeName: AWSAccountId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 1
      TableName: !Sub "${DynamoDBTablePrefix}Accounts"
  Groups:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: GroupId
          AttributeType: S
        - AttributeName: AWSAccountId
          AttributeType: S
      KeySchema:
        - AttributeName: GroupId
          KeyType: HASH
        - AttributeName: AWSAccountId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 1
      TableName: !Sub "${DynamoDBTablePrefix}Groups"
  ApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cuthbert-usw2
        S3Key: rolemaker-dev-1492236368.zip
      Environment:
        Variables:
          DYNAMODB_TABLE_PREFIX: !Ref DynamoDBTablePrefix
      Handler: rolemaker.lambda_handler
      MemorySize: 512
      Role: !GetAtt LambdaApiRole.Arn
      Runtime: python2.7
      Timeout: 30
  LambdaApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: {"Service": ["lambda.amazonaws.com"]}
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: "/"
      Policies:
        - PolicyName: "DynamoDB"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:UpdateItem"
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTablePrefix}Parameters"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTablePrefix}Accounts"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTablePrefix}Groups"
        - PolicyName: "AccessOtherAccounts"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "sts:AssumeRole"
                Resource: "*"
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: !Ref AWS::StackName
      Name: !Ref AWS::StackName
  ProxyPath:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref RestApi
  RootMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        CacheKeyParameters: []
        CacheNamespace: none
        Credentials: !GetAtt ApiGatewayRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses: []
        PassthroughBehavior: NEVER
        Type: AWS_PROXY
        Uri:
          !Sub
            - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
            - Region: !Ref AWS::Region
              LambdaArn: !GetAtt ApiFunction.Arn
      MethodResponses: []
      ResourceId: !GetAtt RestApi.RootResourceId
      RestApiId: !Ref RestApi
  ProxyMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        CacheKeyParameters: []
        CacheNamespace: none
        Credentials: !GetAtt ApiGatewayRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses: []
        PassthroughBehavior: NEVER
        Type: AWS_PROXY
        Uri:
          !Sub
            - "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
            - Region: !Ref AWS::Region
              LambdaArn: !GetAtt ApiFunction.Arn
      MethodResponses: []
      ResourceId: !Ref ProxyPath
      RestApiId: !Ref RestApi
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - RootMethods
      - ProxyMethods
    Properties:
      Description: !Ref AWS::StackName
      RestApiId: !Ref RestApi
      StageName: prod
  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
                - "events.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaInvocation
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudwatch:*"
                  - "logs:*"
                Resource: "*"
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt ApiFunction.Arn
